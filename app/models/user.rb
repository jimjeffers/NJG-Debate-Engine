require 'digest/sha1'

class User < ActiveRecord::Base
  
  named_scope :authors, :conditions => "articles_count > 0"
  named_scope :with_roles, {:conditions => "roles_users.user_id=users.id", :include => :roles}
  named_scope :with_role, lambda { |role| { 
      :conditions => ["roles_users.user_id=users.id AND roles_users.role_id=roles.id AND roles.name=?",role], 
      :include => :roles }
  }
  
  include Authentication
  include Authentication::ByPassword
  include Authentication::ByCookieToken
  
  has_many :answers
  has_many :articles
  has_many :comments
  has_many :orders
  has_many :carts
  has_many :profile_addresses
  
  validates_presence_of     :login
  validates_length_of       :login,    :within => 3..40
  validates_uniqueness_of   :login
  validates_format_of       :login,    :with => Authentication.login_regex, :message => Authentication.bad_login_message

  validates_format_of       :name,     :with => Authentication.name_regex,  :message => Authentication.bad_name_message, :allow_nil => true
  validates_length_of       :name,     :maximum => 100

  validates_presence_of     :email
  validates_length_of       :email,    :within => 6..100 #r@a.wk
  validates_uniqueness_of   :email
  validates_format_of       :email,    :with => Authentication.email_regex, :message => Authentication.bad_email_message

  before_create :make_activation_code 

  # HACK HACK HACK -- how to do attr_accessible from here?
  # prevents a user from submitting a crafted form that bypasses activation
  # anything else you want your user to change should be added here.
  attr_accessible :login, :email, :name, :password, :password_confirmation
  attr_accessor :total_score
  
  # ---------------------------------------
  # The following code has been generated by role_requirement.
  # You may wish to modify it to suit your need
  has_and_belongs_to_many :roles
  
  # has_role? simply needs to return true or false whether a user has a role or not.  
  # It may be a good idea to have "admin" roles return true always
  def has_role?(role_in_question)
    @_list ||= self.roles.collect(&:name)
    return true if @_list.include?("admin")
    (@_list.include?(role_in_question.to_s) )
  end
  
  def add_role(role)
    role = role.to_s.downcase
    self.roles << Role.find_or_create_by_name(role) unless has_role?(role)
  end
  
  def remove_role(role)
    self.roles.delete(Role.find_by_name(role.to_s.downcase))
  end
  
  def unassigned_roles
    Role.all(:conditions => "id NOT IN (#{(roles.length > 0) ? roles.map{|r| r.id}.join(', ') : 'NULL'})")
  end
  # ---------------------------------------
  
  def persuasion_score(sql={})
    # Maybe there is a better way to do this without SQL? Either way it's fairly clean SQL.
    # I doubt we're going to be able to avoid custom sql for some of this custom reporting.
    User.connection.select_all(
      "SELECT
        sum(debateables.score) AS total_score 
      FROM 
        answers answers, 
        debateables debateables 
      WHERE
        answers.user_id = #{id} AND
        debateables.debated_id = answers.id AND
        debateables.debated_type = 'Answer'"
    )[0]['total_score']
  end
  
  # Activates the user in the database.
  def activate!
    @activated = true
    self.activated_at = Time.now.utc
    self.activation_code = nil
    save(false)
  end

  # Returns true if the user has just been activated.
  def recently_activated?
    @activated
  end

  def active?
    # the existence of an activation code means they have not activated yet
    activation_code.nil?
  end

  # Authenticates a user by their login name and unencrypted password.  Returns the user or nil.
  #
  # uff.  this is really an authorization, not authentication routine.  
  # We really need a Dispatch Chain here or something.
  # This will also let us return a human error message.
  #
  def self.authenticate(login, password)
    return nil if login.blank? || password.blank?
    #u = find :first, :conditions => ['login = ? and activated_at IS NOT NULL', login] # need to get the salt
    u = find :first, :conditions => ['login = ?', login] # need to get the salt
    u && u.authenticated?(password) ? u : nil
  end

  def login=(value)
    write_attribute :login, (value ? value.downcase : nil)
  end

  def email=(value)
    write_attribute :email, (value ? value.downcase : nil)
  end

  protected
    
  def make_activation_code
      self.activation_code = self.class.make_token
  end
  
end
